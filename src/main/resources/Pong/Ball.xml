<class>
	<keyword>class</keyword>
	<identifier>
		<name>Ball</name>
		<category>class</category>
		<usage>declared</usage>
	</identifier>
	<symbol>{</symbol>
	<classVarDec>
		<keyword>field</keyword>
		<keyword>int</keyword>
		<identifier>
			<name>x</name>
			<category>field</category>
			<index>0</index>
			<usage>declared</usage>
		</identifier>
		<symbol>,</symbol>
		<identifier>
			<name>y</name>
			<category>field</category>
			<index>1</index>
			<usage>declared</usage>
		</identifier>
		<symbol>;</symbol>
	</classVarDec>
	<classVarDec>
		<keyword>field</keyword>
		<keyword>int</keyword>
		<identifier>
			<name>lengthx</name>
			<category>field</category>
			<index>2</index>
			<usage>declared</usage>
		</identifier>
		<symbol>,</symbol>
		<identifier>
			<name>lengthy</name>
			<category>field</category>
			<index>3</index>
			<usage>declared</usage>
		</identifier>
		<symbol>;</symbol>
	</classVarDec>
	<classVarDec>
		<keyword>field</keyword>
		<keyword>int</keyword>
		<identifier>
			<name>d</name>
			<category>field</category>
			<index>4</index>
			<usage>declared</usage>
		</identifier>
		<symbol>,</symbol>
		<identifier>
			<name>straightD</name>
			<category>field</category>
			<index>5</index>
			<usage>declared</usage>
		</identifier>
		<symbol>,</symbol>
		<identifier>
			<name>diagonalD</name>
			<category>field</category>
			<index>6</index>
			<usage>declared</usage>
		</identifier>
		<symbol>;</symbol>
	</classVarDec>
	<classVarDec>
		<keyword>field</keyword>
		<keyword>boolean</keyword>
		<identifier>
			<name>invert</name>
			<category>field</category>
			<index>7</index>
			<usage>declared</usage>
		</identifier>
		<symbol>,</symbol>
		<identifier>
			<name>positivex</name>
			<category>field</category>
			<index>8</index>
			<usage>declared</usage>
		</identifier>
		<symbol>,</symbol>
		<identifier>
			<name>positivey</name>
			<category>field</category>
			<index>9</index>
			<usage>declared</usage>
		</identifier>
		<symbol>;</symbol>
	</classVarDec>
	<classVarDec>
		<keyword>field</keyword>
		<keyword>int</keyword>
		<identifier>
			<name>leftWall</name>
			<category>field</category>
			<index>10</index>
			<usage>declared</usage>
		</identifier>
		<symbol>,</symbol>
		<identifier>
			<name>rightWall</name>
			<category>field</category>
			<index>11</index>
			<usage>declared</usage>
		</identifier>
		<symbol>,</symbol>
		<identifier>
			<name>topWall</name>
			<category>field</category>
			<index>12</index>
			<usage>declared</usage>
		</identifier>
		<symbol>,</symbol>
		<identifier>
			<name>bottomWall</name>
			<category>field</category>
			<index>13</index>
			<usage>declared</usage>
		</identifier>
		<symbol>;</symbol>
	</classVarDec>
	<classVarDec>
		<keyword>field</keyword>
		<keyword>int</keyword>
		<identifier>
			<name>wall</name>
			<category>field</category>
			<index>14</index>
			<usage>declared</usage>
		</identifier>
		<symbol>;</symbol>
	</classVarDec>
	<subroutineDec>
		<keyword>constructor</keyword>
		<identifier>
			<name>Ball</name>
			<category>subroutine</category>
			<usage>declared</usage>
		</identifier>
		<identifier>
			<name>new</name>
			<category>subroutine</category>
			<usage>declared</usage>
		</identifier>
		<symbol>(</symbol>
		<parameterList>
			<keyword>int</keyword>
			<identifier>
				<name>Ax</name>
				<category>arg</category>
				<index>0</index>
				<usage>declared</usage>
			</identifier>
			<symbol>,</symbol>
			<keyword>int</keyword>
			<identifier>
				<name>Ay</name>
				<category>arg</category>
				<index>1</index>
				<usage>declared</usage>
			</identifier>
			<symbol>,</symbol>
			<keyword>int</keyword>
			<identifier>
				<name>AleftWall</name>
				<category>arg</category>
				<index>2</index>
				<usage>declared</usage>
			</identifier>
			<symbol>,</symbol>
			<keyword>int</keyword>
			<identifier>
				<name>ArightWall</name>
				<category>arg</category>
				<index>3</index>
				<usage>declared</usage>
			</identifier>
			<symbol>,</symbol>
			<keyword>int</keyword>
			<identifier>
				<name>AtopWall</name>
				<category>arg</category>
				<index>4</index>
				<usage>declared</usage>
			</identifier>
			<symbol>,</symbol>
			<keyword>int</keyword>
			<identifier>
				<name>AbottomWall</name>
				<category>arg</category>
				<index>5</index>
				<usage>declared</usage>
			</identifier>
		</parameterList>
		<symbol>)</symbol>
		<subroutineBody>
			<symbol>{</symbol>
			<statements>
				<letStatement>
					<keyword>let</keyword>
					<identifier>
						<name>x</name>
						<category>field</category>
						<index>0</index>
						<usage>used</usage>
					</identifier>
					<symbol>=</symbol>
					<expression>
						<term>
							<identifier>
								<name>Ax</name>
								<category>arg</category>
								<index>0</index>
								<usage>used</usage>
							</identifier>
						</term>
					</expression>
					<symbol>;</symbol>
				</letStatement>
				<letStatement>
					<keyword>let</keyword>
					<identifier>
						<name>y</name>
						<category>field</category>
						<index>1</index>
						<usage>used</usage>
					</identifier>
					<symbol>=</symbol>
					<expression>
						<term>
							<identifier>
								<name>Ay</name>
								<category>arg</category>
								<index>1</index>
								<usage>used</usage>
							</identifier>
						</term>
					</expression>
					<symbol>;</symbol>
				</letStatement>
				<letStatement>
					<keyword>let</keyword>
					<identifier>
						<name>leftWall</name>
						<category>field</category>
						<index>10</index>
						<usage>used</usage>
					</identifier>
					<symbol>=</symbol>
					<expression>
						<term>
							<identifier>
								<name>AleftWall</name>
								<category>arg</category>
								<index>2</index>
								<usage>used</usage>
							</identifier>
						</term>
					</expression>
					<symbol>;</symbol>
				</letStatement>
				<letStatement>
					<keyword>let</keyword>
					<identifier>
						<name>rightWall</name>
						<category>field</category>
						<index>11</index>
						<usage>used</usage>
					</identifier>
					<symbol>=</symbol>
					<expression>
						<term>
							<identifier>
								<name>ArightWall</name>
								<category>arg</category>
								<index>3</index>
								<usage>used</usage>
							</identifier>
						</term>
						<symbol>-</symbol>
						<term>
							<integerConstant>6</integerConstant>
						</term>
					</expression>
					<symbol>;</symbol>
				</letStatement>
				<letStatement>
					<keyword>let</keyword>
					<identifier>
						<name>topWall</name>
						<category>field</category>
						<index>12</index>
						<usage>used</usage>
					</identifier>
					<symbol>=</symbol>
					<expression>
						<term>
							<identifier>
								<name>AtopWall</name>
								<category>arg</category>
								<index>4</index>
								<usage>used</usage>
							</identifier>
						</term>
					</expression>
					<symbol>;</symbol>
				</letStatement>
				<letStatement>
					<keyword>let</keyword>
					<identifier>
						<name>bottomWall</name>
						<category>field</category>
						<index>13</index>
						<usage>used</usage>
					</identifier>
					<symbol>=</symbol>
					<expression>
						<term>
							<identifier>
								<name>AbottomWall</name>
								<category>arg</category>
								<index>5</index>
								<usage>used</usage>
							</identifier>
						</term>
						<symbol>-</symbol>
						<term>
							<integerConstant>6</integerConstant>
						</term>
					</expression>
					<symbol>;</symbol>
				</letStatement>
				<letStatement>
					<keyword>let</keyword>
					<identifier>
						<name>wall</name>
						<category>field</category>
						<index>14</index>
						<usage>used</usage>
					</identifier>
					<symbol>=</symbol>
					<expression>
						<term>
							<integerConstant>0</integerConstant>
						</term>
					</expression>
					<symbol>;</symbol>
				</letStatement>
				<doStatement>
					<keyword>do</keyword>
					<identifier>
						<name>show</name>
						<category>subroutine</category>
						<usage>used</usage>
					</identifier>
					<symbol>(</symbol>
					<expressionList>
					</expressionList>
					<symbol>)</symbol>
					<symbol>;</symbol>
				</doStatement>
				<returnStatement>
					<keyword>return</keyword>
					<expression>
						<term>
							<keyword>this</keyword>
						</term>
					</expression>
					<symbol>;</symbol>
				</returnStatement>
			</statements>
			<symbol>}</symbol>
		</subroutineBody>
	</subroutineDec>
	<subroutineDec>
		<keyword>method</keyword>
		<keyword>void</keyword>
		<identifier>
			<name>dispose</name>
			<category>subroutine</category>
			<usage>declared</usage>
		</identifier>
		<symbol>(</symbol>
		<parameterList>
		</parameterList>
		<symbol>)</symbol>
		<subroutineBody>
			<symbol>{</symbol>
			<statements>
				<doStatement>
					<keyword>do</keyword>
					<identifier>
						<name>Memory</name>
						<category>class</category>
						<usage>used</usage>
					</identifier>
					<symbol>.</symbol>
					<identifier>
						<name>deAlloc</name>
						<category>subroutine</category>
						<usage>used</usage>
					</identifier>
					<symbol>(</symbol>
					<expressionList>
						<expression>
							<term>
								<keyword>this</keyword>
							</term>
						</expression>
					</expressionList>
					<symbol>)</symbol>
					<symbol>;</symbol>
				</doStatement>
				<returnStatement>
					<keyword>return</keyword>
					<symbol>;</symbol>
				</returnStatement>
			</statements>
			<symbol>}</symbol>
		</subroutineBody>
	</subroutineDec>
	<subroutineDec>
		<keyword>method</keyword>
		<keyword>void</keyword>
		<identifier>
			<name>show</name>
			<category>subroutine</category>
			<usage>declared</usage>
		</identifier>
		<symbol>(</symbol>
		<parameterList>
		</parameterList>
		<symbol>)</symbol>
		<subroutineBody>
			<symbol>{</symbol>
			<statements>
				<doStatement>
					<keyword>do</keyword>
					<identifier>
						<name>Screen</name>
						<category>class</category>
						<usage>used</usage>
					</identifier>
					<symbol>.</symbol>
					<identifier>
						<name>setColor</name>
						<category>subroutine</category>
						<usage>used</usage>
					</identifier>
					<symbol>(</symbol>
					<expressionList>
						<expression>
							<term>
								<keyword>true</keyword>
							</term>
						</expression>
					</expressionList>
					<symbol>)</symbol>
					<symbol>;</symbol>
				</doStatement>
				<doStatement>
					<keyword>do</keyword>
					<identifier>
						<name>draw</name>
						<category>subroutine</category>
						<usage>used</usage>
					</identifier>
					<symbol>(</symbol>
					<expressionList>
					</expressionList>
					<symbol>)</symbol>
					<symbol>;</symbol>
				</doStatement>
				<returnStatement>
					<keyword>return</keyword>
					<symbol>;</symbol>
				</returnStatement>
			</statements>
			<symbol>}</symbol>
		</subroutineBody>
	</subroutineDec>
	<subroutineDec>
		<keyword>method</keyword>
		<keyword>void</keyword>
		<identifier>
			<name>hide</name>
			<category>subroutine</category>
			<usage>declared</usage>
		</identifier>
		<symbol>(</symbol>
		<parameterList>
		</parameterList>
		<symbol>)</symbol>
		<subroutineBody>
			<symbol>{</symbol>
			<statements>
				<doStatement>
					<keyword>do</keyword>
					<identifier>
						<name>Screen</name>
						<category>class</category>
						<usage>used</usage>
					</identifier>
					<symbol>.</symbol>
					<identifier>
						<name>setColor</name>
						<category>subroutine</category>
						<usage>used</usage>
					</identifier>
					<symbol>(</symbol>
					<expressionList>
						<expression>
							<term>
								<keyword>false</keyword>
							</term>
						</expression>
					</expressionList>
					<symbol>)</symbol>
					<symbol>;</symbol>
				</doStatement>
				<doStatement>
					<keyword>do</keyword>
					<identifier>
						<name>draw</name>
						<category>subroutine</category>
						<usage>used</usage>
					</identifier>
					<symbol>(</symbol>
					<expressionList>
					</expressionList>
					<symbol>)</symbol>
					<symbol>;</symbol>
				</doStatement>
				<returnStatement>
					<keyword>return</keyword>
					<symbol>;</symbol>
				</returnStatement>
			</statements>
			<symbol>}</symbol>
		</subroutineBody>
	</subroutineDec>
	<subroutineDec>
		<keyword>method</keyword>
		<keyword>void</keyword>
		<identifier>
			<name>draw</name>
			<category>subroutine</category>
			<usage>declared</usage>
		</identifier>
		<symbol>(</symbol>
		<parameterList>
		</parameterList>
		<symbol>)</symbol>
		<subroutineBody>
			<symbol>{</symbol>
			<statements>
				<doStatement>
					<keyword>do</keyword>
					<identifier>
						<name>Screen</name>
						<category>class</category>
						<usage>used</usage>
					</identifier>
					<symbol>.</symbol>
					<identifier>
						<name>drawRectangle</name>
						<category>subroutine</category>
						<usage>used</usage>
					</identifier>
					<symbol>(</symbol>
					<expressionList>
						<expression>
							<term>
								<identifier>
									<name>x</name>
									<category>field</category>
									<index>0</index>
									<usage>used</usage>
								</identifier>
							</term>
						</expression>
						<symbol>,</symbol>
						<expression>
							<term>
								<identifier>
									<name>y</name>
									<category>field</category>
									<index>1</index>
									<usage>used</usage>
								</identifier>
							</term>
						</expression>
						<symbol>,</symbol>
						<expression>
							<term>
								<identifier>
									<name>x</name>
									<category>field</category>
									<index>0</index>
									<usage>used</usage>
								</identifier>
							</term>
							<symbol>+</symbol>
							<term>
								<integerConstant>5</integerConstant>
							</term>
						</expression>
						<symbol>,</symbol>
						<expression>
							<term>
								<identifier>
									<name>y</name>
									<category>field</category>
									<index>1</index>
									<usage>used</usage>
								</identifier>
							</term>
							<symbol>+</symbol>
							<term>
								<integerConstant>5</integerConstant>
							</term>
						</expression>
					</expressionList>
					<symbol>)</symbol>
					<symbol>;</symbol>
				</doStatement>
				<returnStatement>
					<keyword>return</keyword>
					<symbol>;</symbol>
				</returnStatement>
			</statements>
			<symbol>}</symbol>
		</subroutineBody>
	</subroutineDec>
	<subroutineDec>
		<keyword>method</keyword>
		<keyword>int</keyword>
		<identifier>
			<name>getLeft</name>
			<category>subroutine</category>
			<usage>declared</usage>
		</identifier>
		<symbol>(</symbol>
		<parameterList>
		</parameterList>
		<symbol>)</symbol>
		<subroutineBody>
			<symbol>{</symbol>
			<statements>
				<returnStatement>
					<keyword>return</keyword>
					<expression>
						<term>
							<identifier>
								<name>x</name>
								<category>field</category>
								<index>0</index>
								<usage>used</usage>
							</identifier>
						</term>
					</expression>
					<symbol>;</symbol>
				</returnStatement>
			</statements>
			<symbol>}</symbol>
		</subroutineBody>
	</subroutineDec>
	<subroutineDec>
		<keyword>method</keyword>
		<keyword>int</keyword>
		<identifier>
			<name>getRight</name>
			<category>subroutine</category>
			<usage>declared</usage>
		</identifier>
		<symbol>(</symbol>
		<parameterList>
		</parameterList>
		<symbol>)</symbol>
		<subroutineBody>
			<symbol>{</symbol>
			<statements>
				<returnStatement>
					<keyword>return</keyword>
					<expression>
						<term>
							<identifier>
								<name>x</name>
								<category>field</category>
								<index>0</index>
								<usage>used</usage>
							</identifier>
						</term>
						<symbol>+</symbol>
						<term>
							<integerConstant>5</integerConstant>
						</term>
					</expression>
					<symbol>;</symbol>
				</returnStatement>
			</statements>
			<symbol>}</symbol>
		</subroutineBody>
	</subroutineDec>
	<subroutineDec>
		<keyword>method</keyword>
		<keyword>void</keyword>
		<identifier>
			<name>setDestination</name>
			<category>subroutine</category>
			<usage>declared</usage>
		</identifier>
		<symbol>(</symbol>
		<parameterList>
			<keyword>int</keyword>
			<identifier>
				<name>destx</name>
				<category>arg</category>
				<index>0</index>
				<usage>declared</usage>
			</identifier>
			<symbol>,</symbol>
			<keyword>int</keyword>
			<identifier>
				<name>desty</name>
				<category>arg</category>
				<index>1</index>
				<usage>declared</usage>
			</identifier>
		</parameterList>
		<symbol>)</symbol>
		<subroutineBody>
			<symbol>{</symbol>
			<varDec>
				<keyword>var</keyword>
				<keyword>int</keyword>
				<identifier>
					<name>dx</name>
					<category>var</category>
					<index>0</index>
					<usage>declared</usage>
				</identifier>
				<symbol>,</symbol>
				<identifier>
					<name>dy</name>
					<category>var</category>
					<index>1</index>
					<usage>declared</usage>
				</identifier>
				<symbol>,</symbol>
				<identifier>
					<name>temp</name>
					<category>var</category>
					<index>2</index>
					<usage>declared</usage>
				</identifier>
				<symbol>;</symbol>
			</varDec>
			<statements>
				<letStatement>
					<keyword>let</keyword>
					<identifier>
						<name>lengthx</name>
						<category>field</category>
						<index>2</index>
						<usage>used</usage>
					</identifier>
					<symbol>=</symbol>
					<expression>
						<term>
							<identifier>
								<name>destx</name>
								<category>arg</category>
								<index>0</index>
								<usage>used</usage>
							</identifier>
						</term>
						<symbol>-</symbol>
						<term>
							<identifier>
								<name>x</name>
								<category>field</category>
								<index>0</index>
								<usage>used</usage>
							</identifier>
						</term>
					</expression>
					<symbol>;</symbol>
				</letStatement>
				<letStatement>
					<keyword>let</keyword>
					<identifier>
						<name>lengthy</name>
						<category>field</category>
						<index>3</index>
						<usage>used</usage>
					</identifier>
					<symbol>=</symbol>
					<expression>
						<term>
							<identifier>
								<name>desty</name>
								<category>arg</category>
								<index>1</index>
								<usage>used</usage>
							</identifier>
						</term>
						<symbol>-</symbol>
						<term>
							<identifier>
								<name>y</name>
								<category>field</category>
								<index>1</index>
								<usage>used</usage>
							</identifier>
						</term>
					</expression>
					<symbol>;</symbol>
				</letStatement>
				<letStatement>
					<keyword>let</keyword>
					<identifier>
						<name>dx</name>
						<category>var</category>
						<index>0</index>
						<usage>used</usage>
					</identifier>
					<symbol>=</symbol>
					<expression>
						<term>
							<identifier>
								<name>Math</name>
								<category>class</category>
								<usage>used</usage>
							</identifier>
							<symbol>.</symbol>
							<identifier>
								<name>abs</name>
								<category>subroutine</category>
								<usage>used</usage>
							</identifier>
							<symbol>(</symbol>
							<expressionList>
								<expression>
									<term>
										<identifier>
											<name>lengthx</name>
											<category>field</category>
											<index>2</index>
											<usage>used</usage>
										</identifier>
									</term>
								</expression>
							</expressionList>
							<symbol>)</symbol>
						</term>
					</expression>
					<symbol>;</symbol>
				</letStatement>
				<letStatement>
					<keyword>let</keyword>
					<identifier>
						<name>dy</name>
						<category>var</category>
						<index>1</index>
						<usage>used</usage>
					</identifier>
					<symbol>=</symbol>
					<expression>
						<term>
							<identifier>
								<name>Math</name>
								<category>class</category>
								<usage>used</usage>
							</identifier>
							<symbol>.</symbol>
							<identifier>
								<name>abs</name>
								<category>subroutine</category>
								<usage>used</usage>
							</identifier>
							<symbol>(</symbol>
							<expressionList>
								<expression>
									<term>
										<identifier>
											<name>lengthy</name>
											<category>field</category>
											<index>3</index>
											<usage>used</usage>
										</identifier>
									</term>
								</expression>
							</expressionList>
							<symbol>)</symbol>
						</term>
					</expression>
					<symbol>;</symbol>
				</letStatement>
				<letStatement>
					<keyword>let</keyword>
					<identifier>
						<name>invert</name>
						<category>field</category>
						<index>7</index>
						<usage>used</usage>
					</identifier>
					<symbol>=</symbol>
					<expression>
						<term>
							<symbol>(</symbol>
							<expression>
								<term>
									<identifier>
										<name>dx</name>
										<category>var</category>
										<index>0</index>
										<usage>used</usage>
									</identifier>
								</term>
								<symbol>&lt;</symbol>
								<term>
									<identifier>
										<name>dy</name>
										<category>var</category>
										<index>1</index>
										<usage>used</usage>
									</identifier>
								</term>
							</expression>
							<symbol>)</symbol>
						</term>
					</expression>
					<symbol>;</symbol>
				</letStatement>
				<ifStatement>
					<keyword>if</keyword>
					<symbol>(</symbol>
					<expression>
						<term>
							<identifier>
								<name>invert</name>
								<category>field</category>
								<index>7</index>
								<usage>used</usage>
							</identifier>
						</term>
					</expression>
					<symbol>)</symbol>
					<symbol>{</symbol>
					<statements>
						<letStatement>
							<keyword>let</keyword>
							<identifier>
								<name>temp</name>
								<category>var</category>
								<index>2</index>
								<usage>used</usage>
							</identifier>
							<symbol>=</symbol>
							<expression>
								<term>
									<identifier>
										<name>dx</name>
										<category>var</category>
										<index>0</index>
										<usage>used</usage>
									</identifier>
								</term>
							</expression>
							<symbol>;</symbol>
						</letStatement>
						<letStatement>
							<keyword>let</keyword>
							<identifier>
								<name>dx</name>
								<category>var</category>
								<index>0</index>
								<usage>used</usage>
							</identifier>
							<symbol>=</symbol>
							<expression>
								<term>
									<identifier>
										<name>dy</name>
										<category>var</category>
										<index>1</index>
										<usage>used</usage>
									</identifier>
								</term>
							</expression>
							<symbol>;</symbol>
						</letStatement>
						<letStatement>
							<keyword>let</keyword>
							<identifier>
								<name>dy</name>
								<category>var</category>
								<index>1</index>
								<usage>used</usage>
							</identifier>
							<symbol>=</symbol>
							<expression>
								<term>
									<identifier>
										<name>temp</name>
										<category>var</category>
										<index>2</index>
										<usage>used</usage>
									</identifier>
								</term>
							</expression>
							<symbol>;</symbol>
						</letStatement>
						<letStatement>
							<keyword>let</keyword>
							<identifier>
								<name>positivex</name>
								<category>field</category>
								<index>8</index>
								<usage>used</usage>
							</identifier>
							<symbol>=</symbol>
							<expression>
								<term>
									<symbol>(</symbol>
									<expression>
										<term>
											<identifier>
												<name>y</name>
												<category>field</category>
												<index>1</index>
												<usage>used</usage>
											</identifier>
										</term>
										<symbol>&lt;</symbol>
										<term>
											<identifier>
												<name>desty</name>
												<category>arg</category>
												<index>1</index>
												<usage>used</usage>
											</identifier>
										</term>
									</expression>
									<symbol>)</symbol>
								</term>
							</expression>
							<symbol>;</symbol>
						</letStatement>
						<letStatement>
							<keyword>let</keyword>
							<identifier>
								<name>positivey</name>
								<category>field</category>
								<index>9</index>
								<usage>used</usage>
							</identifier>
							<symbol>=</symbol>
							<expression>
								<term>
									<symbol>(</symbol>
									<expression>
										<term>
											<identifier>
												<name>x</name>
												<category>field</category>
												<index>0</index>
												<usage>used</usage>
											</identifier>
										</term>
										<symbol>&lt;</symbol>
										<term>
											<identifier>
												<name>destx</name>
												<category>arg</category>
												<index>0</index>
												<usage>used</usage>
											</identifier>
										</term>
									</expression>
									<symbol>)</symbol>
								</term>
							</expression>
							<symbol>;</symbol>
						</letStatement>
					</statements>
					<symbol>}</symbol>
					<keyword>else</keyword>
					<symbol>{</symbol>
					<statements>
						<letStatement>
							<keyword>let</keyword>
							<identifier>
								<name>positivex</name>
								<category>field</category>
								<index>8</index>
								<usage>used</usage>
							</identifier>
							<symbol>=</symbol>
							<expression>
								<term>
									<symbol>(</symbol>
									<expression>
										<term>
											<identifier>
												<name>x</name>
												<category>field</category>
												<index>0</index>
												<usage>used</usage>
											</identifier>
										</term>
										<symbol>&lt;</symbol>
										<term>
											<identifier>
												<name>destx</name>
												<category>arg</category>
												<index>0</index>
												<usage>used</usage>
											</identifier>
										</term>
									</expression>
									<symbol>)</symbol>
								</term>
							</expression>
							<symbol>;</symbol>
						</letStatement>
						<letStatement>
							<keyword>let</keyword>
							<identifier>
								<name>positivey</name>
								<category>field</category>
								<index>9</index>
								<usage>used</usage>
							</identifier>
							<symbol>=</symbol>
							<expression>
								<term>
									<symbol>(</symbol>
									<expression>
										<term>
											<identifier>
												<name>y</name>
												<category>field</category>
												<index>1</index>
												<usage>used</usage>
											</identifier>
										</term>
										<symbol>&lt;</symbol>
										<term>
											<identifier>
												<name>desty</name>
												<category>arg</category>
												<index>1</index>
												<usage>used</usage>
											</identifier>
										</term>
									</expression>
									<symbol>)</symbol>
								</term>
							</expression>
							<symbol>;</symbol>
						</letStatement>
					</statements>
					<symbol>}</symbol>
				</ifStatement>
				<letStatement>
					<keyword>let</keyword>
					<identifier>
						<name>d</name>
						<category>field</category>
						<index>4</index>
						<usage>used</usage>
					</identifier>
					<symbol>=</symbol>
					<expression>
						<term>
							<symbol>(</symbol>
							<expression>
								<term>
									<integerConstant>2</integerConstant>
								</term>
								<symbol>*</symbol>
								<term>
									<identifier>
										<name>dy</name>
										<category>var</category>
										<index>1</index>
										<usage>used</usage>
									</identifier>
								</term>
							</expression>
							<symbol>)</symbol>
						</term>
						<symbol>-</symbol>
						<term>
							<identifier>
								<name>dx</name>
								<category>var</category>
								<index>0</index>
								<usage>used</usage>
							</identifier>
						</term>
					</expression>
					<symbol>;</symbol>
				</letStatement>
				<letStatement>
					<keyword>let</keyword>
					<identifier>
						<name>straightD</name>
						<category>field</category>
						<index>5</index>
						<usage>used</usage>
					</identifier>
					<symbol>=</symbol>
					<expression>
						<term>
							<integerConstant>2</integerConstant>
						</term>
						<symbol>*</symbol>
						<term>
							<identifier>
								<name>dy</name>
								<category>var</category>
								<index>1</index>
								<usage>used</usage>
							</identifier>
						</term>
					</expression>
					<symbol>;</symbol>
				</letStatement>
				<letStatement>
					<keyword>let</keyword>
					<identifier>
						<name>diagonalD</name>
						<category>field</category>
						<index>6</index>
						<usage>used</usage>
					</identifier>
					<symbol>=</symbol>
					<expression>
						<term>
							<integerConstant>2</integerConstant>
						</term>
						<symbol>*</symbol>
						<term>
							<symbol>(</symbol>
							<expression>
								<term>
									<identifier>
										<name>dy</name>
										<category>var</category>
										<index>1</index>
										<usage>used</usage>
									</identifier>
								</term>
								<symbol>-</symbol>
								<term>
									<identifier>
										<name>dx</name>
										<category>var</category>
										<index>0</index>
										<usage>used</usage>
									</identifier>
								</term>
							</expression>
							<symbol>)</symbol>
						</term>
					</expression>
					<symbol>;</symbol>
				</letStatement>
				<returnStatement>
					<keyword>return</keyword>
					<symbol>;</symbol>
				</returnStatement>
			</statements>
			<symbol>}</symbol>
		</subroutineBody>
	</subroutineDec>
	<subroutineDec>
		<keyword>method</keyword>
		<keyword>int</keyword>
		<identifier>
			<name>move</name>
			<category>subroutine</category>
			<usage>declared</usage>
		</identifier>
		<symbol>(</symbol>
		<parameterList>
		</parameterList>
		<symbol>)</symbol>
		<subroutineBody>
			<symbol>{</symbol>
			<statements>
				<doStatement>
					<keyword>do</keyword>
					<identifier>
						<name>hide</name>
						<category>subroutine</category>
						<usage>used</usage>
					</identifier>
					<symbol>(</symbol>
					<expressionList>
					</expressionList>
					<symbol>)</symbol>
					<symbol>;</symbol>
				</doStatement>
				<ifStatement>
					<keyword>if</keyword>
					<symbol>(</symbol>
					<expression>
						<term>
							<identifier>
								<name>d</name>
								<category>field</category>
								<index>4</index>
								<usage>used</usage>
							</identifier>
						</term>
						<symbol>&lt;</symbol>
						<term>
							<integerConstant>0</integerConstant>
						</term>
					</expression>
					<symbol>)</symbol>
					<symbol>{</symbol>
					<statements>
						<letStatement>
							<keyword>let</keyword>
							<identifier>
								<name>d</name>
								<category>field</category>
								<index>4</index>
								<usage>used</usage>
							</identifier>
							<symbol>=</symbol>
							<expression>
								<term>
									<identifier>
										<name>d</name>
										<category>field</category>
										<index>4</index>
										<usage>used</usage>
									</identifier>
								</term>
								<symbol>+</symbol>
								<term>
									<identifier>
										<name>straightD</name>
										<category>field</category>
										<index>5</index>
										<usage>used</usage>
									</identifier>
								</term>
							</expression>
							<symbol>;</symbol>
						</letStatement>
					</statements>
					<symbol>}</symbol>
					<keyword>else</keyword>
					<symbol>{</symbol>
					<statements>
						<letStatement>
							<keyword>let</keyword>
							<identifier>
								<name>d</name>
								<category>field</category>
								<index>4</index>
								<usage>used</usage>
							</identifier>
							<symbol>=</symbol>
							<expression>
								<term>
									<identifier>
										<name>d</name>
										<category>field</category>
										<index>4</index>
										<usage>used</usage>
									</identifier>
								</term>
								<symbol>+</symbol>
								<term>
									<identifier>
										<name>diagonalD</name>
										<category>field</category>
										<index>6</index>
										<usage>used</usage>
									</identifier>
								</term>
							</expression>
							<symbol>;</symbol>
						</letStatement>
						<ifStatement>
							<keyword>if</keyword>
							<symbol>(</symbol>
							<expression>
								<term>
									<identifier>
										<name>positivey</name>
										<category>field</category>
										<index>9</index>
										<usage>used</usage>
									</identifier>
								</term>
							</expression>
							<symbol>)</symbol>
							<symbol>{</symbol>
							<statements>
								<ifStatement>
									<keyword>if</keyword>
									<symbol>(</symbol>
									<expression>
										<term>
											<identifier>
												<name>invert</name>
												<category>field</category>
												<index>7</index>
												<usage>used</usage>
											</identifier>
										</term>
									</expression>
									<symbol>)</symbol>
									<symbol>{</symbol>
									<statements>
										<letStatement>
											<keyword>let</keyword>
											<identifier>
												<name>x</name>
												<category>field</category>
												<index>0</index>
												<usage>used</usage>
											</identifier>
											<symbol>=</symbol>
											<expression>
												<term>
													<identifier>
														<name>x</name>
														<category>field</category>
														<index>0</index>
														<usage>used</usage>
													</identifier>
												</term>
												<symbol>+</symbol>
												<term>
													<integerConstant>4</integerConstant>
												</term>
											</expression>
											<symbol>;</symbol>
										</letStatement>
									</statements>
									<symbol>}</symbol>
									<keyword>else</keyword>
									<symbol>{</symbol>
									<statements>
										<letStatement>
											<keyword>let</keyword>
											<identifier>
												<name>y</name>
												<category>field</category>
												<index>1</index>
												<usage>used</usage>
											</identifier>
											<symbol>=</symbol>
											<expression>
												<term>
													<identifier>
														<name>y</name>
														<category>field</category>
														<index>1</index>
														<usage>used</usage>
													</identifier>
												</term>
												<symbol>+</symbol>
												<term>
													<integerConstant>4</integerConstant>
												</term>
											</expression>
											<symbol>;</symbol>
										</letStatement>
									</statements>
									<symbol>}</symbol>
								</ifStatement>
							</statements>
							<symbol>}</symbol>
							<keyword>else</keyword>
							<symbol>{</symbol>
							<statements>
								<ifStatement>
									<keyword>if</keyword>
									<symbol>(</symbol>
									<expression>
										<term>
											<identifier>
												<name>invert</name>
												<category>field</category>
												<index>7</index>
												<usage>used</usage>
											</identifier>
										</term>
									</expression>
									<symbol>)</symbol>
									<symbol>{</symbol>
									<statements>
										<letStatement>
											<keyword>let</keyword>
											<identifier>
												<name>x</name>
												<category>field</category>
												<index>0</index>
												<usage>used</usage>
											</identifier>
											<symbol>=</symbol>
											<expression>
												<term>
													<identifier>
														<name>x</name>
														<category>field</category>
														<index>0</index>
														<usage>used</usage>
													</identifier>
												</term>
												<symbol>-</symbol>
												<term>
													<integerConstant>4</integerConstant>
												</term>
											</expression>
											<symbol>;</symbol>
										</letStatement>
									</statements>
									<symbol>}</symbol>
									<keyword>else</keyword>
									<symbol>{</symbol>
									<statements>
										<letStatement>
											<keyword>let</keyword>
											<identifier>
												<name>y</name>
												<category>field</category>
												<index>1</index>
												<usage>used</usage>
											</identifier>
											<symbol>=</symbol>
											<expression>
												<term>
													<identifier>
														<name>y</name>
														<category>field</category>
														<index>1</index>
														<usage>used</usage>
													</identifier>
												</term>
												<symbol>-</symbol>
												<term>
													<integerConstant>4</integerConstant>
												</term>
											</expression>
											<symbol>;</symbol>
										</letStatement>
									</statements>
									<symbol>}</symbol>
								</ifStatement>
							</statements>
							<symbol>}</symbol>
						</ifStatement>
					</statements>
					<symbol>}</symbol>
				</ifStatement>
				<ifStatement>
					<keyword>if</keyword>
					<symbol>(</symbol>
					<expression>
						<term>
							<identifier>
								<name>positivex</name>
								<category>field</category>
								<index>8</index>
								<usage>used</usage>
							</identifier>
						</term>
					</expression>
					<symbol>)</symbol>
					<symbol>{</symbol>
					<statements>
						<ifStatement>
							<keyword>if</keyword>
							<symbol>(</symbol>
							<expression>
								<term>
									<identifier>
										<name>invert</name>
										<category>field</category>
										<index>7</index>
										<usage>used</usage>
									</identifier>
								</term>
							</expression>
							<symbol>)</symbol>
							<symbol>{</symbol>
							<statements>
								<letStatement>
									<keyword>let</keyword>
									<identifier>
										<name>y</name>
										<category>field</category>
										<index>1</index>
										<usage>used</usage>
									</identifier>
									<symbol>=</symbol>
									<expression>
										<term>
											<identifier>
												<name>y</name>
												<category>field</category>
												<index>1</index>
												<usage>used</usage>
											</identifier>
										</term>
										<symbol>+</symbol>
										<term>
											<integerConstant>4</integerConstant>
										</term>
									</expression>
									<symbol>;</symbol>
								</letStatement>
							</statements>
							<symbol>}</symbol>
							<keyword>else</keyword>
							<symbol>{</symbol>
							<statements>
								<letStatement>
									<keyword>let</keyword>
									<identifier>
										<name>x</name>
										<category>field</category>
										<index>0</index>
										<usage>used</usage>
									</identifier>
									<symbol>=</symbol>
									<expression>
										<term>
											<identifier>
												<name>x</name>
												<category>field</category>
												<index>0</index>
												<usage>used</usage>
											</identifier>
										</term>
										<symbol>+</symbol>
										<term>
											<integerConstant>4</integerConstant>
										</term>
									</expression>
									<symbol>;</symbol>
								</letStatement>
							</statements>
							<symbol>}</symbol>
						</ifStatement>
					</statements>
					<symbol>}</symbol>
					<keyword>else</keyword>
					<symbol>{</symbol>
					<statements>
						<ifStatement>
							<keyword>if</keyword>
							<symbol>(</symbol>
							<expression>
								<term>
									<identifier>
										<name>invert</name>
										<category>field</category>
										<index>7</index>
										<usage>used</usage>
									</identifier>
								</term>
							</expression>
							<symbol>)</symbol>
							<symbol>{</symbol>
							<statements>
								<letStatement>
									<keyword>let</keyword>
									<identifier>
										<name>y</name>
										<category>field</category>
										<index>1</index>
										<usage>used</usage>
									</identifier>
									<symbol>=</symbol>
									<expression>
										<term>
											<identifier>
												<name>y</name>
												<category>field</category>
												<index>1</index>
												<usage>used</usage>
											</identifier>
										</term>
										<symbol>-</symbol>
										<term>
											<integerConstant>4</integerConstant>
										</term>
									</expression>
									<symbol>;</symbol>
								</letStatement>
							</statements>
							<symbol>}</symbol>
							<keyword>else</keyword>
							<symbol>{</symbol>
							<statements>
								<letStatement>
									<keyword>let</keyword>
									<identifier>
										<name>x</name>
										<category>field</category>
										<index>0</index>
										<usage>used</usage>
									</identifier>
									<symbol>=</symbol>
									<expression>
										<term>
											<identifier>
												<name>x</name>
												<category>field</category>
												<index>0</index>
												<usage>used</usage>
											</identifier>
										</term>
										<symbol>-</symbol>
										<term>
											<integerConstant>4</integerConstant>
										</term>
									</expression>
									<symbol>;</symbol>
								</letStatement>
							</statements>
							<symbol>}</symbol>
						</ifStatement>
					</statements>
					<symbol>}</symbol>
				</ifStatement>
				<ifStatement>
					<keyword>if</keyword>
					<symbol>(</symbol>
					<expression>
						<term>
							<symbol>~</symbol>
							<term>
								<symbol>(</symbol>
								<expression>
									<term>
										<identifier>
											<name>x</name>
											<category>field</category>
											<index>0</index>
											<usage>used</usage>
										</identifier>
									</term>
									<symbol>&gt;</symbol>
									<term>
										<identifier>
											<name>leftWall</name>
											<category>field</category>
											<index>10</index>
											<usage>used</usage>
										</identifier>
									</term>
								</expression>
								<symbol>)</symbol>
							</term>
						</term>
					</expression>
					<symbol>)</symbol>
					<symbol>{</symbol>
					<statements>
						<letStatement>
							<keyword>let</keyword>
							<identifier>
								<name>wall</name>
								<category>field</category>
								<index>14</index>
								<usage>used</usage>
							</identifier>
							<symbol>=</symbol>
							<expression>
								<term>
									<integerConstant>1</integerConstant>
								</term>
							</expression>
							<symbol>;</symbol>
						</letStatement>
						<letStatement>
							<keyword>let</keyword>
							<identifier>
								<name>x</name>
								<category>field</category>
								<index>0</index>
								<usage>used</usage>
							</identifier>
							<symbol>=</symbol>
							<expression>
								<term>
									<identifier>
										<name>leftWall</name>
										<category>field</category>
										<index>10</index>
										<usage>used</usage>
									</identifier>
								</term>
							</expression>
							<symbol>;</symbol>
						</letStatement>
					</statements>
					<symbol>}</symbol>
				</ifStatement>
				<ifStatement>
					<keyword>if</keyword>
					<symbol>(</symbol>
					<expression>
						<term>
							<symbol>~</symbol>
							<term>
								<symbol>(</symbol>
								<expression>
									<term>
										<identifier>
											<name>x</name>
											<category>field</category>
											<index>0</index>
											<usage>used</usage>
										</identifier>
									</term>
									<symbol>&lt;</symbol>
									<term>
										<identifier>
											<name>rightWall</name>
											<category>field</category>
											<index>11</index>
											<usage>used</usage>
										</identifier>
									</term>
								</expression>
								<symbol>)</symbol>
							</term>
						</term>
					</expression>
					<symbol>)</symbol>
					<symbol>{</symbol>
					<statements>
						<letStatement>
							<keyword>let</keyword>
							<identifier>
								<name>wall</name>
								<category>field</category>
								<index>14</index>
								<usage>used</usage>
							</identifier>
							<symbol>=</symbol>
							<expression>
								<term>
									<integerConstant>2</integerConstant>
								</term>
							</expression>
							<symbol>;</symbol>
						</letStatement>
						<letStatement>
							<keyword>let</keyword>
							<identifier>
								<name>x</name>
								<category>field</category>
								<index>0</index>
								<usage>used</usage>
							</identifier>
							<symbol>=</symbol>
							<expression>
								<term>
									<identifier>
										<name>rightWall</name>
										<category>field</category>
										<index>11</index>
										<usage>used</usage>
									</identifier>
								</term>
							</expression>
							<symbol>;</symbol>
						</letStatement>
					</statements>
					<symbol>}</symbol>
				</ifStatement>
				<ifStatement>
					<keyword>if</keyword>
					<symbol>(</symbol>
					<expression>
						<term>
							<symbol>~</symbol>
							<term>
								<symbol>(</symbol>
								<expression>
									<term>
										<identifier>
											<name>y</name>
											<category>field</category>
											<index>1</index>
											<usage>used</usage>
										</identifier>
									</term>
									<symbol>&gt;</symbol>
									<term>
										<identifier>
											<name>topWall</name>
											<category>field</category>
											<index>12</index>
											<usage>used</usage>
										</identifier>
									</term>
								</expression>
								<symbol>)</symbol>
							</term>
						</term>
					</expression>
					<symbol>)</symbol>
					<symbol>{</symbol>
					<statements>
						<letStatement>
							<keyword>let</keyword>
							<identifier>
								<name>wall</name>
								<category>field</category>
								<index>14</index>
								<usage>used</usage>
							</identifier>
							<symbol>=</symbol>
							<expression>
								<term>
									<integerConstant>3</integerConstant>
								</term>
							</expression>
							<symbol>;</symbol>
						</letStatement>
						<letStatement>
							<keyword>let</keyword>
							<identifier>
								<name>y</name>
								<category>field</category>
								<index>1</index>
								<usage>used</usage>
							</identifier>
							<symbol>=</symbol>
							<expression>
								<term>
									<identifier>
										<name>topWall</name>
										<category>field</category>
										<index>12</index>
										<usage>used</usage>
									</identifier>
								</term>
							</expression>
							<symbol>;</symbol>
						</letStatement>
					</statements>
					<symbol>}</symbol>
				</ifStatement>
				<ifStatement>
					<keyword>if</keyword>
					<symbol>(</symbol>
					<expression>
						<term>
							<symbol>~</symbol>
							<term>
								<symbol>(</symbol>
								<expression>
									<term>
										<identifier>
											<name>y</name>
											<category>field</category>
											<index>1</index>
											<usage>used</usage>
										</identifier>
									</term>
									<symbol>&lt;</symbol>
									<term>
										<identifier>
											<name>bottomWall</name>
											<category>field</category>
											<index>13</index>
											<usage>used</usage>
										</identifier>
									</term>
								</expression>
								<symbol>)</symbol>
							</term>
						</term>
					</expression>
					<symbol>)</symbol>
					<symbol>{</symbol>
					<statements>
						<letStatement>
							<keyword>let</keyword>
							<identifier>
								<name>wall</name>
								<category>field</category>
								<index>14</index>
								<usage>used</usage>
							</identifier>
							<symbol>=</symbol>
							<expression>
								<term>
									<integerConstant>4</integerConstant>
								</term>
							</expression>
							<symbol>;</symbol>
						</letStatement>
						<letStatement>
							<keyword>let</keyword>
							<identifier>
								<name>y</name>
								<category>field</category>
								<index>1</index>
								<usage>used</usage>
							</identifier>
							<symbol>=</symbol>
							<expression>
								<term>
									<identifier>
										<name>bottomWall</name>
										<category>field</category>
										<index>13</index>
										<usage>used</usage>
									</identifier>
								</term>
							</expression>
							<symbol>;</symbol>
						</letStatement>
					</statements>
					<symbol>}</symbol>
				</ifStatement>
				<doStatement>
					<keyword>do</keyword>
					<identifier>
						<name>show</name>
						<category>subroutine</category>
						<usage>used</usage>
					</identifier>
					<symbol>(</symbol>
					<expressionList>
					</expressionList>
					<symbol>)</symbol>
					<symbol>;</symbol>
				</doStatement>
				<returnStatement>
					<keyword>return</keyword>
					<expression>
						<term>
							<identifier>
								<name>wall</name>
								<category>field</category>
								<index>14</index>
								<usage>used</usage>
							</identifier>
						</term>
					</expression>
					<symbol>;</symbol>
				</returnStatement>
			</statements>
			<symbol>}</symbol>
		</subroutineBody>
	</subroutineDec>
	<subroutineDec>
		<keyword>method</keyword>
		<keyword>void</keyword>
		<identifier>
			<name>bounce</name>
			<category>subroutine</category>
			<usage>declared</usage>
		</identifier>
		<symbol>(</symbol>
		<parameterList>
			<keyword>int</keyword>
			<identifier>
				<name>bouncingDirection</name>
				<category>arg</category>
				<index>0</index>
				<usage>declared</usage>
			</identifier>
		</parameterList>
		<symbol>)</symbol>
		<subroutineBody>
			<symbol>{</symbol>
			<varDec>
				<keyword>var</keyword>
				<keyword>int</keyword>
				<identifier>
					<name>newx</name>
					<category>var</category>
					<index>0</index>
					<usage>declared</usage>
				</identifier>
				<symbol>,</symbol>
				<identifier>
					<name>newy</name>
					<category>var</category>
					<index>1</index>
					<usage>declared</usage>
				</identifier>
				<symbol>,</symbol>
				<identifier>
					<name>divLengthx</name>
					<category>var</category>
					<index>2</index>
					<usage>declared</usage>
				</identifier>
				<symbol>,</symbol>
				<identifier>
					<name>divLengthy</name>
					<category>var</category>
					<index>3</index>
					<usage>declared</usage>
				</identifier>
				<symbol>,</symbol>
				<identifier>
					<name>factor</name>
					<category>var</category>
					<index>4</index>
					<usage>declared</usage>
				</identifier>
				<symbol>;</symbol>
			</varDec>
			<statements>
				<letStatement>
					<keyword>let</keyword>
					<identifier>
						<name>divLengthx</name>
						<category>var</category>
						<index>2</index>
						<usage>used</usage>
					</identifier>
					<symbol>=</symbol>
					<expression>
						<term>
							<identifier>
								<name>lengthx</name>
								<category>field</category>
								<index>2</index>
								<usage>used</usage>
							</identifier>
						</term>
						<symbol>/</symbol>
						<term>
							<integerConstant>10</integerConstant>
						</term>
					</expression>
					<symbol>;</symbol>
				</letStatement>
				<letStatement>
					<keyword>let</keyword>
					<identifier>
						<name>divLengthy</name>
						<category>var</category>
						<index>3</index>
						<usage>used</usage>
					</identifier>
					<symbol>=</symbol>
					<expression>
						<term>
							<identifier>
								<name>lengthy</name>
								<category>field</category>
								<index>3</index>
								<usage>used</usage>
							</identifier>
						</term>
						<symbol>/</symbol>
						<term>
							<integerConstant>10</integerConstant>
						</term>
					</expression>
					<symbol>;</symbol>
				</letStatement>
				<ifStatement>
					<keyword>if</keyword>
					<symbol>(</symbol>
					<expression>
						<term>
							<identifier>
								<name>bouncingDirection</name>
								<category>arg</category>
								<index>0</index>
								<usage>used</usage>
							</identifier>
						</term>
						<symbol>=</symbol>
						<term>
							<integerConstant>0</integerConstant>
						</term>
					</expression>
					<symbol>)</symbol>
					<symbol>{</symbol>
					<statements>
						<letStatement>
							<keyword>let</keyword>
							<identifier>
								<name>factor</name>
								<category>var</category>
								<index>4</index>
								<usage>used</usage>
							</identifier>
							<symbol>=</symbol>
							<expression>
								<term>
									<integerConstant>10</integerConstant>
								</term>
							</expression>
							<symbol>;</symbol>
						</letStatement>
					</statements>
					<symbol>}</symbol>
					<keyword>else</keyword>
					<symbol>{</symbol>
					<statements>
						<ifStatement>
							<keyword>if</keyword>
							<symbol>(</symbol>
							<expression>
								<term>
									<symbol>(</symbol>
									<expression>
										<term>
											<symbol>(</symbol>
											<expression>
												<term>
													<symbol>~</symbol>
													<term>
														<symbol>(</symbol>
														<expression>
															<term>
																<identifier>
																	<name>lengthx</name>
																	<category>field</category>
																	<index>2</index>
																	<usage>used</usage>
																</identifier>
															</term>
															<symbol>&lt;</symbol>
															<term>
																<integerConstant>0</integerConstant>
															</term>
														</expression>
														<symbol>)</symbol>
													</term>
												</term>
											</expression>
											<symbol>)</symbol>
										</term>
										<symbol>&amp;</symbol>
										<term>
											<symbol>(</symbol>
											<expression>
												<term>
													<identifier>
														<name>bouncingDirection</name>
														<category>arg</category>
														<index>0</index>
														<usage>used</usage>
													</identifier>
												</term>
												<symbol>=</symbol>
												<term>
													<integerConstant>1</integerConstant>
												</term>
											</expression>
											<symbol>)</symbol>
										</term>
									</expression>
									<symbol>)</symbol>
								</term>
								<symbol>|</symbol>
								<term>
									<symbol>(</symbol>
									<expression>
										<term>
											<symbol>(</symbol>
											<expression>
												<term>
													<identifier>
														<name>lengthx</name>
														<category>field</category>
														<index>2</index>
														<usage>used</usage>
													</identifier>
												</term>
												<symbol>&lt;</symbol>
												<term>
													<integerConstant>0</integerConstant>
												</term>
											</expression>
											<symbol>)</symbol>
										</term>
										<symbol>&amp;</symbol>
										<term>
											<symbol>(</symbol>
											<expression>
												<term>
													<identifier>
														<name>bouncingDirection</name>
														<category>arg</category>
														<index>0</index>
														<usage>used</usage>
													</identifier>
												</term>
												<symbol>=</symbol>
												<term>
													<symbol>(</symbol>
													<expression>
														<term>
															<symbol>-</symbol>
															<term>
																<integerConstant>1</integerConstant>
															</term>
														</term>
													</expression>
													<symbol>)</symbol>
												</term>
											</expression>
											<symbol>)</symbol>
										</term>
									</expression>
									<symbol>)</symbol>
								</term>
							</expression>
							<symbol>)</symbol>
							<symbol>{</symbol>
							<statements>
								<letStatement>
									<keyword>let</keyword>
									<identifier>
										<name>factor</name>
										<category>var</category>
										<index>4</index>
										<usage>used</usage>
									</identifier>
									<symbol>=</symbol>
									<expression>
										<term>
											<integerConstant>20</integerConstant>
										</term>
									</expression>
									<symbol>;</symbol>
								</letStatement>
							</statements>
							<symbol>}</symbol>
							<keyword>else</keyword>
							<symbol>{</symbol>
							<statements>
								<letStatement>
									<keyword>let</keyword>
									<identifier>
										<name>factor</name>
										<category>var</category>
										<index>4</index>
										<usage>used</usage>
									</identifier>
									<symbol>=</symbol>
									<expression>
										<term>
											<integerConstant>5</integerConstant>
										</term>
									</expression>
									<symbol>;</symbol>
								</letStatement>
							</statements>
							<symbol>}</symbol>
						</ifStatement>
					</statements>
					<symbol>}</symbol>
				</ifStatement>
				<ifStatement>
					<keyword>if</keyword>
					<symbol>(</symbol>
					<expression>
						<term>
							<identifier>
								<name>wall</name>
								<category>field</category>
								<index>14</index>
								<usage>used</usage>
							</identifier>
						</term>
						<symbol>=</symbol>
						<term>
							<integerConstant>1</integerConstant>
						</term>
					</expression>
					<symbol>)</symbol>
					<symbol>{</symbol>
					<statements>
						<letStatement>
							<keyword>let</keyword>
							<identifier>
								<name>newx</name>
								<category>var</category>
								<index>0</index>
								<usage>used</usage>
							</identifier>
							<symbol>=</symbol>
							<expression>
								<term>
									<integerConstant>506</integerConstant>
								</term>
							</expression>
							<symbol>;</symbol>
						</letStatement>
						<letStatement>
							<keyword>let</keyword>
							<identifier>
								<name>newy</name>
								<category>var</category>
								<index>1</index>
								<usage>used</usage>
							</identifier>
							<symbol>=</symbol>
							<expression>
								<term>
									<symbol>(</symbol>
									<expression>
										<term>
											<identifier>
												<name>divLengthy</name>
												<category>var</category>
												<index>3</index>
												<usage>used</usage>
											</identifier>
										</term>
										<symbol>*</symbol>
										<term>
											<symbol>(</symbol>
											<expression>
												<term>
													<symbol>-</symbol>
													<term>
														<integerConstant>50</integerConstant>
													</term>
												</term>
											</expression>
											<symbol>)</symbol>
										</term>
									</expression>
									<symbol>)</symbol>
								</term>
								<symbol>/</symbol>
								<term>
									<identifier>
										<name>divLengthx</name>
										<category>var</category>
										<index>2</index>
										<usage>used</usage>
									</identifier>
								</term>
							</expression>
							<symbol>;</symbol>
						</letStatement>
						<letStatement>
							<keyword>let</keyword>
							<identifier>
								<name>newy</name>
								<category>var</category>
								<index>1</index>
								<usage>used</usage>
							</identifier>
							<symbol>=</symbol>
							<expression>
								<term>
									<identifier>
										<name>y</name>
										<category>field</category>
										<index>1</index>
										<usage>used</usage>
									</identifier>
								</term>
								<symbol>+</symbol>
								<term>
									<symbol>(</symbol>
									<expression>
										<term>
											<identifier>
												<name>newy</name>
												<category>var</category>
												<index>1</index>
												<usage>used</usage>
											</identifier>
										</term>
										<symbol>*</symbol>
										<term>
											<identifier>
												<name>factor</name>
												<category>var</category>
												<index>4</index>
												<usage>used</usage>
											</identifier>
										</term>
									</expression>
									<symbol>)</symbol>
								</term>
							</expression>
							<symbol>;</symbol>
						</letStatement>
					</statements>
					<symbol>}</symbol>
					<keyword>else</keyword>
					<symbol>{</symbol>
					<statements>
						<ifStatement>
							<keyword>if</keyword>
							<symbol>(</symbol>
							<expression>
								<term>
									<identifier>
										<name>wall</name>
										<category>field</category>
										<index>14</index>
										<usage>used</usage>
									</identifier>
								</term>
								<symbol>=</symbol>
								<term>
									<integerConstant>2</integerConstant>
								</term>
							</expression>
							<symbol>)</symbol>
							<symbol>{</symbol>
							<statements>
								<letStatement>
									<keyword>let</keyword>
									<identifier>
										<name>newx</name>
										<category>var</category>
										<index>0</index>
										<usage>used</usage>
									</identifier>
									<symbol>=</symbol>
									<expression>
										<term>
											<integerConstant>0</integerConstant>
										</term>
									</expression>
									<symbol>;</symbol>
								</letStatement>
								<letStatement>
									<keyword>let</keyword>
									<identifier>
										<name>newy</name>
										<category>var</category>
										<index>1</index>
										<usage>used</usage>
									</identifier>
									<symbol>=</symbol>
									<expression>
										<term>
											<symbol>(</symbol>
											<expression>
												<term>
													<identifier>
														<name>divLengthy</name>
														<category>var</category>
														<index>3</index>
														<usage>used</usage>
													</identifier>
												</term>
												<symbol>*</symbol>
												<term>
													<integerConstant>50</integerConstant>
												</term>
											</expression>
											<symbol>)</symbol>
										</term>
										<symbol>/</symbol>
										<term>
											<identifier>
												<name>divLengthx</name>
												<category>var</category>
												<index>2</index>
												<usage>used</usage>
											</identifier>
										</term>
									</expression>
									<symbol>;</symbol>
								</letStatement>
								<letStatement>
									<keyword>let</keyword>
									<identifier>
										<name>newy</name>
										<category>var</category>
										<index>1</index>
										<usage>used</usage>
									</identifier>
									<symbol>=</symbol>
									<expression>
										<term>
											<identifier>
												<name>y</name>
												<category>field</category>
												<index>1</index>
												<usage>used</usage>
											</identifier>
										</term>
										<symbol>+</symbol>
										<term>
											<symbol>(</symbol>
											<expression>
												<term>
													<identifier>
														<name>newy</name>
														<category>var</category>
														<index>1</index>
														<usage>used</usage>
													</identifier>
												</term>
												<symbol>*</symbol>
												<term>
													<identifier>
														<name>factor</name>
														<category>var</category>
														<index>4</index>
														<usage>used</usage>
													</identifier>
												</term>
											</expression>
											<symbol>)</symbol>
										</term>
									</expression>
									<symbol>;</symbol>
								</letStatement>
							</statements>
							<symbol>}</symbol>
							<keyword>else</keyword>
							<symbol>{</symbol>
							<statements>
								<ifStatement>
									<keyword>if</keyword>
									<symbol>(</symbol>
									<expression>
										<term>
											<identifier>
												<name>wall</name>
												<category>field</category>
												<index>14</index>
												<usage>used</usage>
											</identifier>
										</term>
										<symbol>=</symbol>
										<term>
											<integerConstant>3</integerConstant>
										</term>
									</expression>
									<symbol>)</symbol>
									<symbol>{</symbol>
									<statements>
										<letStatement>
											<keyword>let</keyword>
											<identifier>
												<name>newy</name>
												<category>var</category>
												<index>1</index>
												<usage>used</usage>
											</identifier>
											<symbol>=</symbol>
											<expression>
												<term>
													<integerConstant>250</integerConstant>
												</term>
											</expression>
											<symbol>;</symbol>
										</letStatement>
										<letStatement>
											<keyword>let</keyword>
											<identifier>
												<name>newx</name>
												<category>var</category>
												<index>0</index>
												<usage>used</usage>
											</identifier>
											<symbol>=</symbol>
											<expression>
												<term>
													<symbol>(</symbol>
													<expression>
														<term>
															<identifier>
																<name>divLengthx</name>
																<category>var</category>
																<index>2</index>
																<usage>used</usage>
															</identifier>
														</term>
														<symbol>*</symbol>
														<term>
															<symbol>(</symbol>
															<expression>
																<term>
																	<symbol>-</symbol>
																	<term>
																		<integerConstant>25</integerConstant>
																	</term>
																</term>
															</expression>
															<symbol>)</symbol>
														</term>
													</expression>
													<symbol>)</symbol>
												</term>
												<symbol>/</symbol>
												<term>
													<identifier>
														<name>divLengthy</name>
														<category>var</category>
														<index>3</index>
														<usage>used</usage>
													</identifier>
												</term>
											</expression>
											<symbol>;</symbol>
										</letStatement>
										<letStatement>
											<keyword>let</keyword>
											<identifier>
												<name>newx</name>
												<category>var</category>
												<index>0</index>
												<usage>used</usage>
											</identifier>
											<symbol>=</symbol>
											<expression>
												<term>
													<identifier>
														<name>x</name>
														<category>field</category>
														<index>0</index>
														<usage>used</usage>
													</identifier>
												</term>
												<symbol>+</symbol>
												<term>
													<symbol>(</symbol>
													<expression>
														<term>
															<identifier>
																<name>newx</name>
																<category>var</category>
																<index>0</index>
																<usage>used</usage>
															</identifier>
														</term>
														<symbol>*</symbol>
														<term>
															<identifier>
																<name>factor</name>
																<category>var</category>
																<index>4</index>
																<usage>used</usage>
															</identifier>
														</term>
													</expression>
													<symbol>)</symbol>
												</term>
											</expression>
											<symbol>;</symbol>
										</letStatement>
									</statements>
									<symbol>}</symbol>
									<keyword>else</keyword>
									<symbol>{</symbol>
									<statements>
										<letStatement>
											<keyword>let</keyword>
											<identifier>
												<name>newy</name>
												<category>var</category>
												<index>1</index>
												<usage>used</usage>
											</identifier>
											<symbol>=</symbol>
											<expression>
												<term>
													<integerConstant>0</integerConstant>
												</term>
											</expression>
											<symbol>;</symbol>
										</letStatement>
										<letStatement>
											<keyword>let</keyword>
											<identifier>
												<name>newx</name>
												<category>var</category>
												<index>0</index>
												<usage>used</usage>
											</identifier>
											<symbol>=</symbol>
											<expression>
												<term>
													<symbol>(</symbol>
													<expression>
														<term>
															<identifier>
																<name>divLengthx</name>
																<category>var</category>
																<index>2</index>
																<usage>used</usage>
															</identifier>
														</term>
														<symbol>*</symbol>
														<term>
															<integerConstant>25</integerConstant>
														</term>
													</expression>
													<symbol>)</symbol>
												</term>
												<symbol>/</symbol>
												<term>
													<identifier>
														<name>divLengthy</name>
														<category>var</category>
														<index>3</index>
														<usage>used</usage>
													</identifier>
												</term>
											</expression>
											<symbol>;</symbol>
										</letStatement>
										<letStatement>
											<keyword>let</keyword>
											<identifier>
												<name>newx</name>
												<category>var</category>
												<index>0</index>
												<usage>used</usage>
											</identifier>
											<symbol>=</symbol>
											<expression>
												<term>
													<identifier>
														<name>x</name>
														<category>field</category>
														<index>0</index>
														<usage>used</usage>
													</identifier>
												</term>
												<symbol>+</symbol>
												<term>
													<symbol>(</symbol>
													<expression>
														<term>
															<identifier>
																<name>newx</name>
																<category>var</category>
																<index>0</index>
																<usage>used</usage>
															</identifier>
														</term>
														<symbol>*</symbol>
														<term>
															<identifier>
																<name>factor</name>
																<category>var</category>
																<index>4</index>
																<usage>used</usage>
															</identifier>
														</term>
													</expression>
													<symbol>)</symbol>
												</term>
											</expression>
											<symbol>;</symbol>
										</letStatement>
									</statements>
									<symbol>}</symbol>
								</ifStatement>
							</statements>
							<symbol>}</symbol>
						</ifStatement>
					</statements>
					<symbol>}</symbol>
				</ifStatement>
				<doStatement>
					<keyword>do</keyword>
					<identifier>
						<name>setDestination</name>
						<category>subroutine</category>
						<usage>used</usage>
					</identifier>
					<symbol>(</symbol>
					<expressionList>
						<expression>
							<term>
								<identifier>
									<name>newx</name>
									<category>var</category>
									<index>0</index>
									<usage>used</usage>
								</identifier>
							</term>
						</expression>
						<symbol>,</symbol>
						<expression>
							<term>
								<identifier>
									<name>newy</name>
									<category>var</category>
									<index>1</index>
									<usage>used</usage>
								</identifier>
							</term>
						</expression>
					</expressionList>
					<symbol>)</symbol>
					<symbol>;</symbol>
				</doStatement>
				<returnStatement>
					<keyword>return</keyword>
					<symbol>;</symbol>
				</returnStatement>
			</statements>
			<symbol>}</symbol>
		</subroutineBody>
	</subroutineDec>
	<symbol>}</symbol>
</class>
