<class>
	<keyword>class</keyword>
	<identifier>
		<name>Main</name>
		<category>class</category>
		<usage>declared</usage>
	</identifier>
	<symbol>{</symbol>
	<subroutineDec>
		<keyword>function</keyword>
		<keyword>void</keyword>
		<identifier>
			<name>main</name>
			<category>subroutine</category>
			<usage>declared</usage>
		</identifier>
		<symbol>(</symbol>
		<parameterList>
		</parameterList>
		<symbol>)</symbol>
		<subroutineBody>
			<symbol>{</symbol>
			<varDec>
				<keyword>var</keyword>
				<keyword>int</keyword>
				<identifier>
					<name>value</name>
					<category>var</category>
					<index>0</index>
					<usage>declared</usage>
				</identifier>
				<symbol>;</symbol>
			</varDec>
			<statements>
				<doStatement>
					<keyword>do</keyword>
					<identifier>
						<name>Main</name>
						<category>class</category>
						<usage>used</usage>
					</identifier>
					<symbol>.</symbol>
					<identifier>
						<name>fillMemory</name>
						<category>subroutine</category>
						<usage>used</usage>
					</identifier>
					<symbol>(</symbol>
					<expressionList>
						<expression>
							<term>
								<integerConstant>8001</integerConstant>
							</term>
						</expression>
						<symbol>,</symbol>
						<expression>
							<term>
								<integerConstant>16</integerConstant>
							</term>
						</expression>
						<symbol>,</symbol>
						<expression>
							<term>
								<symbol>-</symbol>
								<term>
									<integerConstant>1</integerConstant>
								</term>
							</term>
						</expression>
					</expressionList>
					<symbol>)</symbol>
					<symbol>;</symbol>
				</doStatement>
				<letStatement>
					<keyword>let</keyword>
					<identifier>
						<name>value</name>
						<category>var</category>
						<index>0</index>
						<usage>used</usage>
					</identifier>
					<symbol>=</symbol>
					<expression>
						<term>
							<identifier>
								<name>Memory</name>
								<category>class</category>
								<usage>used</usage>
							</identifier>
							<symbol>.</symbol>
							<identifier>
								<name>peek</name>
								<category>subroutine</category>
								<usage>used</usage>
							</identifier>
							<symbol>(</symbol>
							<expressionList>
								<expression>
									<term>
										<integerConstant>8000</integerConstant>
									</term>
								</expression>
							</expressionList>
							<symbol>)</symbol>
						</term>
					</expression>
					<symbol>;</symbol>
				</letStatement>
				<doStatement>
					<keyword>do</keyword>
					<identifier>
						<name>Main</name>
						<category>class</category>
						<usage>used</usage>
					</identifier>
					<symbol>.</symbol>
					<identifier>
						<name>convert</name>
						<category>subroutine</category>
						<usage>used</usage>
					</identifier>
					<symbol>(</symbol>
					<expressionList>
						<expression>
							<term>
								<identifier>
									<name>value</name>
									<category>var</category>
									<index>0</index>
									<usage>used</usage>
								</identifier>
							</term>
						</expression>
					</expressionList>
					<symbol>)</symbol>
					<symbol>;</symbol>
				</doStatement>
				<returnStatement>
					<keyword>return</keyword>
					<symbol>;</symbol>
				</returnStatement>
			</statements>
			<symbol>}</symbol>
		</subroutineBody>
	</subroutineDec>
	<subroutineDec>
		<keyword>function</keyword>
		<keyword>void</keyword>
		<identifier>
			<name>convert</name>
			<category>subroutine</category>
			<usage>declared</usage>
		</identifier>
		<symbol>(</symbol>
		<parameterList>
			<keyword>int</keyword>
			<identifier>
				<name>value</name>
				<category>arg</category>
				<index>0</index>
				<usage>declared</usage>
			</identifier>
		</parameterList>
		<symbol>)</symbol>
		<subroutineBody>
			<symbol>{</symbol>
			<varDec>
				<keyword>var</keyword>
				<keyword>int</keyword>
				<identifier>
					<name>mask</name>
					<category>var</category>
					<index>0</index>
					<usage>declared</usage>
				</identifier>
				<symbol>,</symbol>
				<identifier>
					<name>position</name>
					<category>var</category>
					<index>1</index>
					<usage>declared</usage>
				</identifier>
				<symbol>;</symbol>
			</varDec>
			<varDec>
				<keyword>var</keyword>
				<keyword>boolean</keyword>
				<identifier>
					<name>loop</name>
					<category>var</category>
					<index>2</index>
					<usage>declared</usage>
				</identifier>
				<symbol>;</symbol>
			</varDec>
			<statements>
				<letStatement>
					<keyword>let</keyword>
					<identifier>
						<name>loop</name>
						<category>var</category>
						<index>2</index>
						<usage>used</usage>
					</identifier>
					<symbol>=</symbol>
					<expression>
						<term>
							<keyword>true</keyword>
						</term>
					</expression>
					<symbol>;</symbol>
				</letStatement>
				<whileStatement>
					<keyword>while</keyword>
					<symbol>(</symbol>
					<expression>
						<term>
							<identifier>
								<name>loop</name>
								<category>var</category>
								<index>2</index>
								<usage>used</usage>
							</identifier>
						</term>
					</expression>
					<symbol>)</symbol>
					<symbol>{</symbol>
					<statements>
						<letStatement>
							<keyword>let</keyword>
							<identifier>
								<name>position</name>
								<category>var</category>
								<index>1</index>
								<usage>used</usage>
							</identifier>
							<symbol>=</symbol>
							<expression>
								<term>
									<identifier>
										<name>position</name>
										<category>var</category>
										<index>1</index>
										<usage>used</usage>
									</identifier>
								</term>
								<symbol>+</symbol>
								<term>
									<integerConstant>1</integerConstant>
								</term>
							</expression>
							<symbol>;</symbol>
						</letStatement>
						<letStatement>
							<keyword>let</keyword>
							<identifier>
								<name>mask</name>
								<category>var</category>
								<index>0</index>
								<usage>used</usage>
							</identifier>
							<symbol>=</symbol>
							<expression>
								<term>
									<identifier>
										<name>Main</name>
										<category>class</category>
										<usage>used</usage>
									</identifier>
									<symbol>.</symbol>
									<identifier>
										<name>nextMask</name>
										<category>subroutine</category>
										<usage>used</usage>
									</identifier>
									<symbol>(</symbol>
									<expressionList>
										<expression>
											<term>
												<identifier>
													<name>mask</name>
													<category>var</category>
													<index>0</index>
													<usage>used</usage>
												</identifier>
											</term>
										</expression>
									</expressionList>
									<symbol>)</symbol>
								</term>
							</expression>
							<symbol>;</symbol>
						</letStatement>
						<ifStatement>
							<keyword>if</keyword>
							<symbol>(</symbol>
							<expression>
								<term>
									<symbol>~</symbol>
									<term>
										<symbol>(</symbol>
										<expression>
											<term>
												<identifier>
													<name>position</name>
													<category>var</category>
													<index>1</index>
													<usage>used</usage>
												</identifier>
											</term>
											<symbol>&gt;</symbol>
											<term>
												<integerConstant>16</integerConstant>
											</term>
										</expression>
										<symbol>)</symbol>
									</term>
								</term>
							</expression>
							<symbol>)</symbol>
							<symbol>{</symbol>
							<statements>
								<ifStatement>
									<keyword>if</keyword>
									<symbol>(</symbol>
									<expression>
										<term>
											<symbol>~</symbol>
											<term>
												<symbol>(</symbol>
												<expression>
													<term>
														<symbol>(</symbol>
														<expression>
															<term>
																<identifier>
																	<name>value</name>
																	<category>arg</category>
																	<index>0</index>
																	<usage>used</usage>
																</identifier>
															</term>
															<symbol>&amp;</symbol>
															<term>
																<identifier>
																	<name>mask</name>
																	<category>var</category>
																	<index>0</index>
																	<usage>used</usage>
																</identifier>
															</term>
														</expression>
														<symbol>)</symbol>
													</term>
													<symbol>=</symbol>
													<term>
														<integerConstant>0</integerConstant>
													</term>
												</expression>
												<symbol>)</symbol>
											</term>
										</term>
									</expression>
									<symbol>)</symbol>
									<symbol>{</symbol>
									<statements>
										<doStatement>
											<keyword>do</keyword>
											<identifier>
												<name>Memory</name>
												<category>class</category>
												<usage>used</usage>
											</identifier>
											<symbol>.</symbol>
											<identifier>
												<name>poke</name>
												<category>subroutine</category>
												<usage>used</usage>
											</identifier>
											<symbol>(</symbol>
											<expressionList>
												<expression>
													<term>
														<integerConstant>8000</integerConstant>
													</term>
													<symbol>+</symbol>
													<term>
														<identifier>
															<name>position</name>
															<category>var</category>
															<index>1</index>
															<usage>used</usage>
														</identifier>
													</term>
												</expression>
												<symbol>,</symbol>
												<expression>
													<term>
														<integerConstant>1</integerConstant>
													</term>
												</expression>
											</expressionList>
											<symbol>)</symbol>
											<symbol>;</symbol>
										</doStatement>
									</statements>
									<symbol>}</symbol>
									<keyword>else</keyword>
									<symbol>{</symbol>
									<statements>
										<doStatement>
											<keyword>do</keyword>
											<identifier>
												<name>Memory</name>
												<category>class</category>
												<usage>used</usage>
											</identifier>
											<symbol>.</symbol>
											<identifier>
												<name>poke</name>
												<category>subroutine</category>
												<usage>used</usage>
											</identifier>
											<symbol>(</symbol>
											<expressionList>
												<expression>
													<term>
														<integerConstant>8000</integerConstant>
													</term>
													<symbol>+</symbol>
													<term>
														<identifier>
															<name>position</name>
															<category>var</category>
															<index>1</index>
															<usage>used</usage>
														</identifier>
													</term>
												</expression>
												<symbol>,</symbol>
												<expression>
													<term>
														<integerConstant>0</integerConstant>
													</term>
												</expression>
											</expressionList>
											<symbol>)</symbol>
											<symbol>;</symbol>
										</doStatement>
									</statements>
									<symbol>}</symbol>
								</ifStatement>
							</statements>
							<symbol>}</symbol>
							<keyword>else</keyword>
							<symbol>{</symbol>
							<statements>
								<letStatement>
									<keyword>let</keyword>
									<identifier>
										<name>loop</name>
										<category>var</category>
										<index>2</index>
										<usage>used</usage>
									</identifier>
									<symbol>=</symbol>
									<expression>
										<term>
											<keyword>false</keyword>
										</term>
									</expression>
									<symbol>;</symbol>
								</letStatement>
							</statements>
							<symbol>}</symbol>
						</ifStatement>
					</statements>
					<symbol>}</symbol>
				</whileStatement>
				<returnStatement>
					<keyword>return</keyword>
					<symbol>;</symbol>
				</returnStatement>
			</statements>
			<symbol>}</symbol>
		</subroutineBody>
	</subroutineDec>
	<subroutineDec>
		<keyword>function</keyword>
		<keyword>int</keyword>
		<identifier>
			<name>nextMask</name>
			<category>subroutine</category>
			<usage>declared</usage>
		</identifier>
		<symbol>(</symbol>
		<parameterList>
			<keyword>int</keyword>
			<identifier>
				<name>mask</name>
				<category>arg</category>
				<index>0</index>
				<usage>declared</usage>
			</identifier>
		</parameterList>
		<symbol>)</symbol>
		<subroutineBody>
			<symbol>{</symbol>
			<statements>
				<ifStatement>
					<keyword>if</keyword>
					<symbol>(</symbol>
					<expression>
						<term>
							<identifier>
								<name>mask</name>
								<category>arg</category>
								<index>0</index>
								<usage>used</usage>
							</identifier>
						</term>
						<symbol>=</symbol>
						<term>
							<integerConstant>0</integerConstant>
						</term>
					</expression>
					<symbol>)</symbol>
					<symbol>{</symbol>
					<statements>
						<returnStatement>
							<keyword>return</keyword>
							<expression>
								<term>
									<integerConstant>1</integerConstant>
								</term>
							</expression>
							<symbol>;</symbol>
						</returnStatement>
					</statements>
					<symbol>}</symbol>
					<keyword>else</keyword>
					<symbol>{</symbol>
					<statements>
						<returnStatement>
							<keyword>return</keyword>
							<expression>
								<term>
									<identifier>
										<name>mask</name>
										<category>arg</category>
										<index>0</index>
										<usage>used</usage>
									</identifier>
								</term>
								<symbol>*</symbol>
								<term>
									<integerConstant>2</integerConstant>
								</term>
							</expression>
							<symbol>;</symbol>
						</returnStatement>
					</statements>
					<symbol>}</symbol>
				</ifStatement>
			</statements>
			<symbol>}</symbol>
		</subroutineBody>
	</subroutineDec>
	<subroutineDec>
		<keyword>function</keyword>
		<keyword>void</keyword>
		<identifier>
			<name>fillMemory</name>
			<category>subroutine</category>
			<usage>declared</usage>
		</identifier>
		<symbol>(</symbol>
		<parameterList>
			<keyword>int</keyword>
			<identifier>
				<name>address</name>
				<category>arg</category>
				<index>0</index>
				<usage>declared</usage>
			</identifier>
			<symbol>,</symbol>
			<keyword>int</keyword>
			<identifier>
				<name>length</name>
				<category>arg</category>
				<index>1</index>
				<usage>declared</usage>
			</identifier>
			<symbol>,</symbol>
			<keyword>int</keyword>
			<identifier>
				<name>value</name>
				<category>arg</category>
				<index>2</index>
				<usage>declared</usage>
			</identifier>
		</parameterList>
		<symbol>)</symbol>
		<subroutineBody>
			<symbol>{</symbol>
			<statements>
				<whileStatement>
					<keyword>while</keyword>
					<symbol>(</symbol>
					<expression>
						<term>
							<identifier>
								<name>length</name>
								<category>arg</category>
								<index>1</index>
								<usage>used</usage>
							</identifier>
						</term>
						<symbol>&gt;</symbol>
						<term>
							<integerConstant>0</integerConstant>
						</term>
					</expression>
					<symbol>)</symbol>
					<symbol>{</symbol>
					<statements>
						<doStatement>
							<keyword>do</keyword>
							<identifier>
								<name>Memory</name>
								<category>class</category>
								<usage>used</usage>
							</identifier>
							<symbol>.</symbol>
							<identifier>
								<name>poke</name>
								<category>subroutine</category>
								<usage>used</usage>
							</identifier>
							<symbol>(</symbol>
							<expressionList>
								<expression>
									<term>
										<identifier>
											<name>address</name>
											<category>arg</category>
											<index>0</index>
											<usage>used</usage>
										</identifier>
									</term>
								</expression>
								<symbol>,</symbol>
								<expression>
									<term>
										<identifier>
											<name>value</name>
											<category>arg</category>
											<index>2</index>
											<usage>used</usage>
										</identifier>
									</term>
								</expression>
							</expressionList>
							<symbol>)</symbol>
							<symbol>;</symbol>
						</doStatement>
						<letStatement>
							<keyword>let</keyword>
							<identifier>
								<name>length</name>
								<category>arg</category>
								<index>1</index>
								<usage>used</usage>
							</identifier>
							<symbol>=</symbol>
							<expression>
								<term>
									<identifier>
										<name>length</name>
										<category>arg</category>
										<index>1</index>
										<usage>used</usage>
									</identifier>
								</term>
								<symbol>-</symbol>
								<term>
									<integerConstant>1</integerConstant>
								</term>
							</expression>
							<symbol>;</symbol>
						</letStatement>
						<letStatement>
							<keyword>let</keyword>
							<identifier>
								<name>address</name>
								<category>arg</category>
								<index>0</index>
								<usage>used</usage>
							</identifier>
							<symbol>=</symbol>
							<expression>
								<term>
									<identifier>
										<name>address</name>
										<category>arg</category>
										<index>0</index>
										<usage>used</usage>
									</identifier>
								</term>
								<symbol>+</symbol>
								<term>
									<integerConstant>1</integerConstant>
								</term>
							</expression>
							<symbol>;</symbol>
						</letStatement>
					</statements>
					<symbol>}</symbol>
				</whileStatement>
				<returnStatement>
					<keyword>return</keyword>
					<symbol>;</symbol>
				</returnStatement>
			</statements>
			<symbol>}</symbol>
		</subroutineBody>
	</subroutineDec>
	<symbol>}</symbol>
</class>
